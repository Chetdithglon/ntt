
_G.load = true

local Players = game.Players
local Player = Players.LocalPlayer

game:GetService('RunService').RenderStepped:connect(function()
if _G.load then
for i,v in pairs(game:GetDescendants()) do
   if v.Name == "Fruit" then
                    local Distance = (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude                
                  if Distance < 250 then
                  Speed = 7000
                  elseif Distance < 150 then
                  Speed = 200000
                  elseif Distance < 500 then
                  Speed = 725
                  elseif Distance < 1000 then
                        Speed = 300
                   elseif Distance >= 1500 then
                         if game.Players.LocalPlayer.Character.Humanoid.Health > 0 then
            game.Players.LocalPlayer.Character.Humanoid.Health = 0
            end        
            end
            if  game.Players.LocalPlayer.Character.Humanoid.Health > 0 then    
game:GetService("TweenService"):Create(
                        game.Players.LocalPlayer.Character.HumanoidRootPart,
                        TweenInfo.new(Distance/Speed, Enum.EasingStyle.Linear),
                        {CFrame = v.CFrame}
                    ):Play()
            end
           if  game.Players.LocalPlayer.Character.Humanoid.Health == 0 then 
            Player.Character.HumanoidRootPart.CFrame = v.CFrame* CFrame.new(25,15,0)
           
           
local args = {
    [1] = "StoreFruit",
    [2] = "v",
    [3] = v:FindFirstChild("Fruit")
}

game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))

 end  end end end end)
            --tp
            
            while wait(60) do
            for i,v in pairs(game:GetDescendants()) do
   if v.Name == "Fruit" then
            if not v:FindFirstChild("Fruit") then
            --svv

local PlaceID = game.PlaceId
          local AllIDs = {}
          local foundAnything = ""
          local actualHour = os.date("!*t").hour
          local Deleted = false
          --[[
          local File = pcall(function()
              AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
          end)
          if not File then
              table.insert(AllIDs, actualHour)
              writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
          end
          ]]
          function TPReturner()
              local Site;
              if foundAnything == "" then
                  Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
              else
                  Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
              end
              local ID = ""
              if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
                  foundAnything = Site.nextPageCursor
              end
              local num = 0;
              for i,v in pairs(Site.data) do
                  local Possible = true
                  ID = tostring(v.id)
                  if tonumber(v.maxPlayers) > tonumber(v.playing) then
                      for _,Existing in pairs(AllIDs) do
                          if num ~= 0 then
                              if ID == tostring(Existing) then
                                  Possible = false
                              end
                          else
                              if tonumber(actualHour) ~= tonumber(Existing) then
                                  local delFile = pcall(function()
                                      -- delfile("NotSameServers.json")
                                      AllIDs = {}
                                      table.insert(AllIDs, actualHour)
                                  end)
                              end
                          end
                          num = num + 1
                      end
                      if Possible == true then
                          table.insert(AllIDs, ID)
                          wait()
                          pcall(function()
                              -- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                              wait()
                              game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                          end)
                          wait(4)
                      end
                  end
              end
          end

          function Teleport()
              while wait() do
                  pcall(function()
                      TPReturner()
                      if foundAnything ~= "" then
                          TPReturner()
                      end
                  end)
              end
          end

          Teleport()
      
            end end
            end
         end
           
            
            
           
